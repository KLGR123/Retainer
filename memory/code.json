[
    {
        "role": "system",
        "content": "你是一个辅助用户实现 Unity 游戏开发的 Unity C# 代码开发专家。\n你的用户通常是一些初学者，他们希望使用 Unity Hub 进行游戏开发，但是对 Unity 的使用并不熟悉。\n\n你需要充分理解用户对游戏策划和场景搭建的策划；其中，“游戏玩法”和“所需代码”是你需要重点关注的内容，你需要依据此像一个 C# 专家一样写代码；你被鼓励尽可能多生成代码；你应当尽可能完整的实现每个函数功能，不允许留有一些待实现的函数或代码块；你生成的.cs文件中每个自创的变量或类必须都有对应的实现，而不允许使用未创建的类实例化，也不允许编造不存在的变量，也不允许在某一.cs文件中声明某一类或函数，而后在另一.cs文件里调用它；你在写代码的时候如果要命名某个 class，那么该 class 的命名应当与当前文件名保持一致；\n\n你不被允许引用不常用的第三方库，或者在代码中使用没有定义的类或函数或变量等；你可以使用 Unity 自带的库，例如 Unity，UnityEngine 和 UnityEditor 等，但需要按照 Unity Documentation Scripting API 的规范使用。\n\n如下是一个例子。\n\n假设已有如下的游戏策划：\n- **游戏策划**\n```json\n{{\n    \"游戏玩法\": \"玩家点击屏幕触发小鸟飞起，否则小鸟下落。场景中会有连续不断的上下两根柱子向小鸟移动，玩家需要控制小鸟通过两根柱子之间的空隙，否则游戏结束。\",\n    \"所需素材\": {{\n        \"Bird.png\": \"小鸟的图片\",\n        \"Pipe.png\": \"柱子的图片\",\n        \"Background.png\": \"背景的图片\"\n    }},\n    \"所需代码\": {{\n        \"Bird.cs\": \"用于控制小鸟移动的代码\",\n        \"Column.cs\": \"用于柱子基本实现的代码\",\n        \"ColumnPool.cs\": \"生成和重用柱子的代码\",\n        \"GameControl.cs\": \"用于管理整个游戏逻辑的代码\",\n        \"RepeatingBackground.cs\": \"用于实现无限滚动背景的代码\",\n        \"ScrollingObject.cs\": \"控制场景中物体向左移动以及碰撞检测的代码\"\n    }}\n}}\n```\n则你生成的代码库类似如下：\n- Bird.cs\n```csharp\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class Bird : MonoBehaviour\n{{\n    public float upForce = 200f;\n    public int player_num;\n\n    private bool isDead = false;\n    private bool isDead2 = false;\n    private Rigidbody2D rb2d;\n    private Animator anim;\n    \n    void Start()\n    {{\n        rb2d = GetComponent<Rigidbody2D> ();\n        anim = GetComponent<Animator> ();\n    }}\n    \n    void Update()\n    {{\n        if (isDead == false)\n        {{\n            if (Input.GetMouseButtonDown(0) && player_num == 0) //left click\n            {{\n                rb2d.velocity = Vector2.zero;\n                rb2d.AddForce(new Vector2 (0, upForce));\n                anim.SetTrigger(\"Flap\");\n            }}\n        }}\n        if (isDead2 == false)\n        {{\n            if (Input.GetKeyDown(KeyCode.Space) && player_num == 1)\n            {{\n                rb2d.velocity = Vector2.zero;\n                rb2d.AddForce(new Vector2(0, upForce));\n                anim.SetTrigger(\"Flap\");\n            }}\n        }}\n    }}\n\n    void OnCollisionEnter2D()\n    {{\n        if (isDead == false && player_num == 0)\n        {{\n            rb2d.velocity = Vector2.zero;\n            isDead = true;\n            anim.SetTrigger(\"Die\");\n            GameControl.instance.BirdDied();\n        }}\n    }}\n}}\n```\n- Column.cs\n```csharp\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class Column : MonoBehaviour {{\n    private void OnTriggerEnter2D(Collider2D other)\n    {{\n        if (other.GetComponent<Bird> () != null)\n        {{\n            if (other.CompareTag(\"B1\"))\n            {{\n                GameControl.instance.BirdScored();\n            }}\n        }}\n    }}\n}}\n```\n- ColumnPool.cs\n```csharp\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class ColumnPool : MonoBehaviour {{\n    public int columnPoolSize = 5;\n    public GameObject columnPrefab;\n    public float spawnRate = 4f;\n    public float columnMin = -1f;\n    public float columnMax = 3.5f;\n\n    private GameObject[] columns;\n    private Vector2 objectPoolPosition = new Vector2(-15f, -25f);\n    private float timeSinceLastSpawned;\n    private float spawnXPosition = 10f;\n    private int currentColumn = 0;\n\n\t// Use this for initialization\n\tvoid Start () \n    {{\n        columns = new GameObject[columnPoolSize];\n        for (int i = 0; i < columnPoolSize; i++)\n        {{\n            columns[i] = (GameObject)Instantiate(columnPrefab, objectPoolPosition, Quaternion.identity);\n        }}\n\t}}\n\t\n\t// Update is called once per frame\n\tvoid Update () \n    {{\n        timeSinceLastSpawned += Time.deltaTime;\n        if (timeSinceLastSpawned >= spawnRate)\n        {{\n             timeSinceLastSpawned = 0;\n             float spawnYPosition = Random.Range(columnMin, columnMax);\n             columns[currentColumn].transform.position = new Vector2(spawnXPosition, spawnYPosition);\n             currentColumn++;\n             if (currentColumn >= columnPoolSize)\n             {{\n                currentColumn = 0;\n             }}\n        }}\n\t}}\n}}\n```\n- GameControl.cs\n```csharp\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.SceneManagement;\nusing UnityEngine.UI;\n\npublic class GameControl : MonoBehaviour {{\n\n    public static GameControl instance;\n    public GameObject gameOverText;\n    public Text scoreText;\n    public bool gameOver = false;\n    public float scrollSpeed = -1.5f;\n    private int score = 0;\n\n\tvoid Awake () \n    {{\n        if (instance == null)\n        {{\n            instance = this;\n        }}\n        else if (instance != this)\n        {{\n            Destroy(gameObject);\n        }}\n        Time.timeScale = 0;\n\t}}\n\n    public void OnStartGame()\n    {{\n        Time.timeScale = 1;\n    }}\n\n    public void OnGameOver()\n    {{\n        SceneManager.LoadScene(\"MainMap\");\n    }}\n\n    public void BirdScored()\n    {{\n        if (gameOver)\n        {{\n            return;\n        }}\n        score++;\n        scoreText.text = \"Score: \" + score.ToString();\n    }}\n\n    public void BirdDied()\n    {{\n        gameOver = true;       \n        gameOverText.SetActive(true);\n    }}\n}}\n```\n- RepeatingBackground.cs\n```csharp\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class RepeatingBackground : MonoBehaviour {{\n\n    private BoxCollider2D groundCollider;\n    private float groundHorizontalLength;\n    \n\t// Use this for initialization\n\tvoid Start () \n    {{\n        groundCollider = GetComponent<BoxCollider2D>();\n        groundHorizontalLength = groundCollider.size.x;\n\t}}\n\t\n\t// Update is called once per frame\n\tvoid Update () \n    {{\n\t\tif (transform.position.x < -groundHorizontalLength)\n        {{\n            RepositionBackground ();\n        }}\n\t}}\n\n    private void RepositionBackground()\n    {{\n        Vector2 groundOffset = new Vector2(groundHorizontalLength * 2f, 0);\n        transform.position = (Vector2)transform.position + groundOffset;\n    }}\n}}\n```\n- ScrollingObject.cs\n```csharp\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class ScrollingObject : MonoBehaviour {{\n\n    private Rigidbody2D rb2d;\n\t// Use this for initialization\n\tvoid Start () \n    {{\n        rb2d = GetComponent<Rigidbody2D>();\n        rb2d.velocity = new Vector2(GameControl.instance.scrollSpeed, 0);\n\t}}\n\t\n\t// Update is called once per frame\n\tvoid Update () \n    {{\n\t\tif (GameControl.instance.gameOver == true)\n        {{\n            rb2d.velocity = Vector2.zero;\n        }}\n\t}}\n}}\n```\n\n不要忘记，尽可能生成长而正确的、不存在 BUG 的代码，以保证策划案中的所有需求都能被正确实现。",
        "tokens": 2009
    },
    {
        "role": "assistant",
        "content": "当前已有策划案内容如下：\n{'游戏策划': {'游戏玩法': '玩家通过点击屏幕控制一只大脚踩下，目标是踩死屏幕上随机出现的虫子。虫子分为快慢两种，快虫子移动速度较快，踩死后获得2分；慢虫子移动速度较慢，踩死后获得1分。玩家需要在虫子逃跑前踩中它们。每当虫子被踩死时，会显示虫子爆浆的动画效果。游戏随着时间推移，虫子出现的频率和速度会逐渐增加。游戏结束条件是玩家错过一定数量的虫子。玩家连续踩死十只虫子时，获得的分数翻倍；连续踩死二十只虫子时，获得一个持续十秒的变大脚Buff，增加踩中虫子的范围。', '所需素材': {'Foot.png': '大脚的图片', 'FastBug.png': '快速虫子的图片', 'SlowBug.png': '慢速虫子的图片', 'Background.png': '背景的图片', 'BugSplat.png': '虫子被踩死后爆浆的图片', 'BigFoot.png': '变大脚Buff时大脚的图片'}, '所需代码': {'FootControl.cs': '用于控制大脚踩下的代码', 'BugControl.cs': '用于控制虫子移动和生成的代码', 'GameControl.cs': '用于管理游戏逻辑的代码', 'UIControl.cs': '用于管理游戏UI的代码', 'SplatEffect.cs': '用于显示虫子爆浆效果的代码', 'BuffControl.cs': '用于管理Buff效果的代码'}}, '场景搭建': ['放置背景图片，并在背景上加载背景控制代码', '创建大脚预制体，并在大脚上加载FootControl代码', '创建快速虫子预制体，并在虫子上加载BugControl代码', '创建慢速虫子预制体，并在虫子上加载BugControl代码', '创建游戏控制空物体，并在游戏控制空物体上加载GameControl代码', '创建UI，并加载UIControl代码', '为虫子预制体添加爆浆效果，并加载SplatEffect代码', '在大脚预制体上添加BuffControl代码以实现变大脚Buff效果']}",
        "tokens": 727
    },
    {
        "role": "system",
        "content": "现在，请根据上述例子、用户的指示以及当前的游戏策划内容，生成“所需代码”列表中所有.cs代码文件的内容。",
        "tokens": 43
    },
    {
        "role": "assistant",
        "content": "{\"filename\":\"FootControl.cs\",\"code\":\"using System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\n\\npublic class FootControl : MonoBehaviour\\n{\\n    public float stompSpeed = 5f;\\n    public Sprite normalFootSprite;\\n    public Sprite bigFootSprite;\\n    private SpriteRenderer spriteRenderer;\\n    private bool isStomping = false;\\n    private bool hasBigFootBuff = false;\\n\\n    void Start()\\n    {\\n        spriteRenderer = GetComponent<SpriteRenderer>();\\n    }\\n\\n    void Update()\\n    {\\n        if (Input.GetMouseButtonDown(0))\\n        {\\n            StartCoroutine(Stomp());\\n        }\\n    }\\n\\n    private IEnumerator Stomp()\\n    {\\n        if (!isStomping)\\n        {\\n            isStomping = true;\\n            Vector3 originalPosition = transform.position;\\n            Vector3 targetPosition = new Vector3(transform.position.x, transform.position.y - 1, transform.position.z);\\n\\n            while (transform.position.y > targetPosition.y)\\n            {\\n                transform.position = Vector3.MoveTowards(transform.position, targetPosition, stompSpeed * Time.deltaTime);\\n                yield return null;\\n            }\\n\\n            // Check for bugs under the foot\\n            Collider2D[] hitColliders = Physics2D.OverlapCircleAll(transform.position, hasBigFootBuff ? 1.5f : 1f);\\n            foreach (var hitCollider in hitColliders)\\n            {\\n                if (hitCollider.CompareTag(\\\"Bug\\\"))\\n                {\\n                    hitCollider.GetComponent<BugControl>().Squash();\\n                }\\n            }\\n\\n            while (transform.position.y < originalPosition.y)\\n            {\\n                transform.position = Vector3.MoveTowards(transform.position, originalPosition, stompSpeed * Time.deltaTime);\\n                yield return null;\\n            }\\n\\n            isStomping = false;\\n        }\\n    }\\n\\n    public void ActivateBigFootBuff()\\n    {\\n        hasBigFootBuff = true;\\n        spriteRenderer.sprite = bigFootSprite;\\n        StartCoroutine(DeactivateBigFootBuffAfterTime(10f));\\n    }\\n\\n    private IEnumerator DeactivateBigFootBuffAfterTime(float time)\\n    {\\n        yield return new WaitForSeconds(time);\\n        hasBigFootBuff = false;\\n        spriteRenderer.sprite = normalFootSprite;\\n    }\\n}\"}",
        "tokens": 524
    },
    {
        "role": "assistant",
        "content": "{\"filename\":\"BugControl.cs\",\"code\":\"using System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\n\\npublic class BugControl : MonoBehaviour\\n{\\n    public float minSpeed = 1f;\\n    public float maxSpeed = 3f;\\n    public bool isFastBug = false;\\n    private float speed;\\n    private bool isSquashed = false;\\n\\n    void Start()\\n    {\\n        speed = isFastBug ? maxSpeed : minSpeed;\\n    }\\n\\n    void Update()\\n    {\\n        if (!isSquashed)\\n        {\\n            transform.Translate(Vector3.left * speed * Time.deltaTime);\\n            if (transform.position.x < -10f) // If bug goes off screen\\n            {\\n                GameControl.instance.MissedBug();\\n                Destroy(gameObject);\\n            }\\n        }\\n    }\\n\\n    public void Squash()\\n    {\\n        if (!isSquashed)\\n        {\\n            isSquashed = true;\\n            GameControl.instance.BugSquashed(isFastBug);\\n            StartCoroutine(SplatEffect());\\n        }\\n    }\\n\\n    private IEnumerator SplatEffect()\\n    {\\n        // Show splat effect\\n        GetComponent<SpriteRenderer>().sprite = Resources.Load<Sprite>(\\\"BugSplat\\\");\\n        yield return new WaitForSeconds(0.5f);\\n        Destroy(gameObject);\\n    }\\n}\"}",
        "tokens": 308
    },
    {
        "role": "assistant",
        "content": "{\"filename\":\"GameControl.cs\",\"code\":\"using System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\nusing UnityEngine.UI;\\n\\npublic class GameControl : MonoBehaviour\\n{\\n    public static GameControl instance;\\n    public GameObject fastBugPrefab;\\n    public GameObject slowBugPrefab;\\n    public Text scoreText;\\n    public Text gameOverText;\\n    public float spawnRate = 2f;\\n    public int maxMissedBugs = 5;\\n\\n    private int score = 0;\\n    private int missedBugs = 0;\\n    private int consecutiveHits = 0;\\n    private bool gameOver = false;\\n\\n    void Awake()\\n    {\\n        if (instance == null)\\n        {\\n            instance = this;\\n        }\\n        else if (instance != this)\\n        {\\n            Destroy(gameObject);\\n        }\\n    }\\n\\n    void Start()\\n    {\\n        StartCoroutine(SpawnBugs());\\n        gameOverText.gameObject.SetActive(false);\\n    }\\n\\n    private IEnumerator SpawnBugs()\\n    {\\n        while (!gameOver)\\n        {\\n            float spawnXPosition = 10f;\\n            float spawnYPosition = Random.Range(-3f, 3f);\\n            GameObject bug = Random.value > 0.5f ? fastBugPrefab : slowBugPrefab;\\n            Instantiate(bug, new Vector3(spawnXPosition, spawnYPosition, 0), Quaternion.identity);\\n            yield return new WaitForSeconds(spawnRate);\\n        }\\n    }\\n\\n    public void BugSquashed(bool isFastBug)\\n    {\\n        score += isFastBug ? 2 : 1;\\n        consecutiveHits++;\\n        if (consecutiveHits == 10)\\n        {\\n            score *= 2;\\n        }\\n        else if (consecutiveHits == 20)\\n        {\\n            FindObjectOfType<FootControl>().ActivateBigFootBuff();\\n        }\\n        scoreText.text = \\\"Score: \\\" + score;\\n    }\\n\\n    public void MissedBug()\\n    {\\n        missedBugs++;\\n        if (missedBugs >= maxMissedBugs)\\n        {\\n            GameOver();\\n        }\\n    }\\n\\n    private void GameOver()\\n    {\\n        gameOver = true;\\n        gameOverText.gameObject.SetActive(true);\\n        StopAllCoroutines();\\n    }\\n}\"}",
        "tokens": 528
    },
    {
        "role": "assistant",
        "content": "{\"filename\":\"UIControl.cs\",\"code\":\"using System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\nusing UnityEngine.UI;\\n\\npublic class UIControl : MonoBehaviour\\n{\\n    public Text scoreText;\\n    public Text gameOverText;\\n\\n    void Start()\\n    {\\n        scoreText.text = \\\"Score: 0\\\";\\n        gameOverText.gameObject.SetActive(false);\\n    }\\n\\n    public void UpdateScore(int score)\\n    {\\n        scoreText.text = \\\"Score: \\\" + score;\\n    }\\n\\n    public void ShowGameOver()\\n    {\\n        gameOverText.gameObject.SetActive(true);\\n    }\\n}\"}",
        "tokens": 138
    },
    {
        "role": "assistant",
        "content": "{\"filename\":\"SplatEffect.cs\",\"code\":\"using System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\n\\npublic class SplatEffect : MonoBehaviour\\n{\\n    public Sprite splatSprite;\\n\\n    public void ShowSplatEffect(Vector3 position)\\n    {\\n        GameObject splat = new GameObject(\\\"Splat\\\");\\n        SpriteRenderer renderer = splat.AddComponent<SpriteRenderer>();\\n        renderer.sprite = splatSprite;\\n        splat.transform.position = position;\\n        StartCoroutine(RemoveSplatAfterTime(splat, 0.5f));\\n    }\\n\\n    private IEnumerator RemoveSplatAfterTime(GameObject splat, float time)\\n    {\\n        yield return new WaitForSeconds(time);\\n        Destroy(splat);\\n    }\\n}\"}",
        "tokens": 166
    },
    {
        "role": "assistant",
        "content": "{\"filename\":\"BuffControl.cs\",\"code\":\"using System.Collections;\\nusing System.Collections.Generic;\\nusing UnityEngine;\\n\\npublic class BuffControl : MonoBehaviour\\n{\\n    private FootControl footControl;\\n\\n    void Start()\\n    {\\n        footControl = GetComponent<FootControl>();\\n    }\\n\\n    public void ActivateBigFootBuff()\\n    {\\n        footControl.ActivateBigFootBuff();\\n    }\\n}\"}",
        "tokens": 94
    }
]